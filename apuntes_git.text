üîπgit log: te muestra los ultimos commits en la consola
*git log --oneline: te muestra los commits unicamente como nombre de el cambio y el serial
*git log --graph: te muestra todos los cambios de git como una linea de tiempo con los otros branch
*git log --all: todos los commits, hasta de otros branch
*git log --decorate: commits mas bonitos
*ver (alias): todo junto

üîπgit checkout: siver para volver a una anterior version de un commit dejandolo en staging, y para regresar 
a la del presente se necesita usan el a√±adido "master", ademas que sirve para cambiar de ramas de trabajo
*git checkout ‚Äìb: crear√° una nueva rama y saltar√° a ella de forma inmediata

üîπgit branch [Nombre de rama]:crea una nueva rama
*git branch --delete [nombreRama]:borrar√° la rama que se indique
*git branch ‚ÄìD [nombreRama]:fuerza la eliminaci√≥n de ramas que a√∫n no han sido fusionadas
*git branch ‚Äìv // muestra el √∫ltimo commit de cada rama
*git branch --merged // lista las ramas que se fusionaron con la rama actual
*git branch --no-merged // lista las ramas que no se han fusionado con la rama actual
*git merge --abort // anula el merge y devuelve todo a como estaba antes
*git branch -m oldName newName // Cambiar nombre
*git show-branch: ense√±a las ramas
*git show-branch --all: ense√±a todas las ramas

üîπgit push
*git push -u origin [Branch en push]: para subir los commits a github

üîπgit pull origin main: trae los commits del github
  
üîπgit merge [branchName]: une un branch con otro

üîπgit config -l : configuracion de correo y usuario
*git config --global user.email "tu correo": cambiar correo

üîπgit push origin :refs/tags/"nombre del tag": elimina el tag del github
*git tag -d "nombre del tag": elimina el tag del git

‚ùóA√ëADIR UNA ACTUALIZACION DE RAMA DE OTRO PROYECTO DESDE EL FORK‚ùó

ESTO SE UTILIZA CUANDO EL REPOSITORIO DE OTRA PERSONA HA SIDO MAS ACTULIZADO que
TU VERSION DE SU PROYECTO, PARA TRAERTELO A TU REPOSITORIO

üî•LA MANERA MAS SENCILLA ES COMPRAR DESDE GITHUB Y HACER UN MERGE.

üíßLA OTRA MANERA DESDE LA COLSOLA ES CREAR UN REMOTO, 
LO CREAMOS CON:
üîπgit remote add <nombre_del_remoto> <url_del_remoto> 

EJEMPLO:
git remote upstream https://github.com/freddier/hyperblog

CON ESTO CREAMOS UN REMOTO ADICIONAL, Y PODEMOS HACER UN PULL DEL NUEVO CONTENIDO DEL 
REPOSITORIO ORIGINAL

üîπgit pull <remoto> <rama>

EJEMPLO:
git pull upstream master

DESPUES DE ESTE PULL NOS TRAE LOS COMBIOS Y PODEMOS REALIZAR SEGUIDO EL PUSH A NUESTRO 
REPOSITORIO EN GITHUB

git pull upstream master

git push origin master

üîπgit rebase (nombre de branch): a√±ade los commits de ese branch al que tienes abierto

üîπgit stash

*git stash : Guarda el trabajo actual de manera temporal. (Archivos modificados o eliminados)
*git stash -u : Crea un stash con todos los archivos. (A√±adiendo los creados Untracked)
*git stash save ‚Äúmensaje‚Äù : Crea un stash con el mensaje especificado.
*git stash list : Permite visualizar todos los stash existentes.
*git stash clear : Elimina todos los stash existentes.
*git stash drop : Elimina el stash m√°s reciente. El que tiene num_stash=0.
*git stash drop stash@{num_stash} : Elimina un stash espec√≠fico.
*git stash apply : Aplica el stash m√°s reciente. El que tiene num_stash=0.
*git stash apply stash@{num_stash} : Aplica los cambios de un stash espec√≠fico.
*git stash pop : Aplica el stash m√°s reciente y lo elimina. El que tiene num_stash=0.
*git stash pop stash@{num_stash} : Aplica los cambios de un stash espec√≠fico y elimina lo stash.
*git stash branch nombre_de_rama : Crea una rama y aplica el stash mas reciente.
*git stash branch nombre_de_rama stash@{num_stash} : Crea una rama y aplica el stash especificado.

Consideraciones:

El cambio m√°s reciente (al crear un stash) SIEMPRE recibe el valor 0 y los que estaban antes aumentan su valor.
Al crear un stash tomar√° los archivos que han sido modificados y eliminados. Para que tome un archivo creado es necesario agregarlo al Staging Area con git add [nombre_archivo] con la intenci√≥n de que git tenga un seguimiento de ese archivo, o tambi√©n utilizando el comando git stash -u.
Al aplicar un stash este no se elimina, es buena pr√°ctica eliminarlo.

üîπgit clean **** atencion de este modo no va a ejecutar nada 
*git clean --dry-run: te avisa lo que va a borrar√°
*git clean -f :ejecuta el borrado

*git clean -fn  //Archivos
*git clean -dn  //Directorios
*git clean -xn  //Archivos ignorados

üîπgit reflog : Muestra TODOS los commits que existieron